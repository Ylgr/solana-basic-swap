{"version":3,"sources":["MyWallet.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MyWallet","connection","useConnection","programId","moveAddress","poolAddress","useState","associatedTokenAddress","setAssociatedTokenAddress","wallet","useAnchorWallet","walletAddress","publicKey","toString","solBalance","setSolBalance","swapAmount","setSwapAmount","moveBalance","setMoveBalance","Token","getAssociatedTokenAddress","ASSOCIATED_TOKEN_PROGRAM_ID","TOKEN_PROGRAM_ID","PublicKey","then","key","refreshBalance","associatedTokenPublicKey","a","getBalance","getTokenAccountBalance","tokenBalance","value","amount","getRecentBlockhash","recentBlockhash","options","feePayer","blockhash","transaction","Transaction","add","createAssociatedTokenAccountInstruction","signTransaction","rawTx","sendRawTransaction","serialize","createPool","poolAccount","anchor","Keypair","generate","console","log","provider","preflightCommitment","commitment","program","Program","BasicSwapIdl","rpc","accounts","initializerDepositTokenAccount","initializerReceiveWalletAccount","pool","systemProgram","SystemProgram","tokenProgram","signer","signers","swap","BN","takerReceiveTokenAccount","pdaDepositTokenAccount","pdaAccount","result","className","type","placeholder","onChange","event","Number","target","Button","onClick","App","network","WalletAdapterNetwork","Devnet","endpoint","React","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getLedgerWallet","getSolletWallet","getSolletExtensionWallet","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.839cbb39.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {\n    useAnchorWallet,\n    useConnection,\n    useWallet,\n} from '@solana/wallet-adapter-react';\nimport {\n    WalletModalProvider,\n    WalletDisconnectButton,\n    WalletMultiButton,\n} from '@solana/wallet-adapter-react-ui';\nimport {Button} from \"@solana/wallet-adapter-react-ui/lib/Button\";\nimport {Keypair, PublicKey, SystemProgram, Transaction, TransactionCtorFields} from \"@solana/web3.js\";\nimport {BN, getProvider, Program, Provider} from \"@project-serum/anchor\";\nimport BasicSwapIdl from \"./idl/basic_swap.json\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { TOKEN_PROGRAM_ID, Token, ASSOCIATED_TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\n\nconst MyWallet: React.FC = () => {\n    const {connection} = useConnection();\n    const programId = '7GFXgchPpNAaysNviqMjDFD9kE4YbW1DAEaVCMoRnTCU'\n    const moveAddress = 'DLdkyT6nKp2zS6iyJFj3faqSdHveiz7C6RGdte39YDHD'\n    const poolAddress = '84hy58zLcaW4mVS3RtyrSHEP9w8A8WUiZreBEiYDdbo9'\n    const initializerTokenAccountMove = 'LVYiNAsPmLbVdD4ZGSkknwBnSchzUCpMbgCbyyaB1Vd'\n    const initializerReceiveWalletAccount = '7dDe6VZMuUvrWs9TV361Rp9Rv2m1JS7PZk2Cy6ExZysg'\n    // let walletAddress = \"\";\n    let [associatedTokenAddress, setAssociatedTokenAddress] = useState(\"\");\n    // if you use anchor, use the anchor hook instead\n    const wallet = useAnchorWallet();\n    const walletAddress = wallet?.publicKey.toString();\n    const [solBalance, setSolBalance] = useState(0)\n    const [swapAmount, setSwapAmount] = useState(10)\n    const [moveBalance, setMoveBalance] = useState('0')\n\n    // const wallet = useWallet();\n    if (wallet?.publicKey) {\n        Token.getAssociatedTokenAddress(ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, new PublicKey(moveAddress), wallet?.publicKey).then(\n            (key) => {\n                setAssociatedTokenAddress(key.toString())\n                refreshBalance(wallet.publicKey, key)\n            }\n        )\n    }\n    const refreshBalance = async (publicKey: PublicKey, associatedTokenPublicKey: PublicKey) => {\n        setSolBalance(await connection.getBalance(publicKey))\n        try {\n            const tokenBalance = await connection.getTokenAccountBalance(associatedTokenPublicKey)\n            setMoveBalance(tokenBalance.value.amount)\n        } catch (e) {\n            const recentBlockhash = await connection.getRecentBlockhash();\n            const options: TransactionCtorFields = {\n                feePayer: publicKey,\n                recentBlockhash: recentBlockhash.blockhash,\n            };\n            const transaction = new Transaction(options);\n            transaction.add(\n                Token.createAssociatedTokenAccountInstruction(\n                    ASSOCIATED_TOKEN_PROGRAM_ID,\n                    TOKEN_PROGRAM_ID,\n                    new PublicKey(moveAddress),\n                    new PublicKey(associatedTokenPublicKey),\n                    publicKey,\n                    publicKey\n                )\n            )\n            const rawTx = await wallet?.signTransaction(transaction)\n            await connection.sendRawTransaction(rawTx!.serialize())\n        }\n    }\n\n    const createPool = async () => {\n        const poolAccount = anchor.web3.Keypair.generate();\n        console.log('poolAccount: ', poolAccount.publicKey.toString())\n        if (wallet?.publicKey) {\n            const provider = new anchor.Provider(connection, wallet, {\n                preflightCommitment: \"recent\",\n                commitment: \"processed\",\n            });\n            const program = new Program(BasicSwapIdl as any, programId, provider);\n            await program.rpc.createPool(\n                {\n                    accounts: {\n                        // initializerDepositTokenAccount: initializerTokenAccountMove,\n                        initializerDepositTokenAccount: new PublicKey(associatedTokenAddress),\n                        // initializerReceiveWalletAccount: initializerReceiveWalletAccount,\n                        initializerReceiveWalletAccount: wallet.publicKey,\n                        pool: poolAccount.publicKey,\n                        systemProgram: SystemProgram.programId,\n                        tokenProgram: TOKEN_PROGRAM_ID,\n                        signer: wallet.publicKey\n                    },\n                    signers: [poolAccount],\n                }\n            );\n        }\n    }\n\n    const swap = async () => {\n        // const [_pda, _nonce] = await PublicKey.findProgramAddress(\n        //     [Buffer.from(anchor.utils.bytes.utf8.encode(\"swap\"))],\n        //     new PublicKey(programId)\n        // );\n        // console.log('_pda: ', _pda.toString())\n        if (wallet?.publicKey) {\n            const provider = new anchor.Provider(connection, wallet, {\n                preflightCommitment: \"recent\",\n                commitment: \"processed\",\n            });\n            const program = new Program(BasicSwapIdl as any, programId, provider);\n            const result = await program.rpc.swap(\n                new BN(swapAmount),\n                {\n                    accounts: {\n                        takerReceiveTokenAccount: new PublicKey(associatedTokenAddress),\n                        pdaDepositTokenAccount: new PublicKey(initializerTokenAccountMove),\n                        initializerReceiveWalletAccount: new PublicKey(initializerReceiveWalletAccount),\n                        pool: new PublicKey(poolAddress),\n                        pdaAccount: new PublicKey('H5fEF8bGvxhFmYKNRqan4XTeWX4uoghWJgwkXFHuXAsN'),\n                        tokenProgram: TOKEN_PROGRAM_ID,\n                        systemProgram: SystemProgram.programId,\n                        signer: provider.wallet.publicKey\n                    }\n                }\n            )\n            console.log('result: ', result)\n            refreshBalance(wallet.publicKey, new PublicKey(associatedTokenAddress))\n        }\n    }\n\n    return (\n        <>\n\n            <p>\n                ProgramId: {programId}\n            </p>\n            <p>\n                MOVE address: {moveAddress}\n            </p>\n            <p>\n                Pool: {poolAddress}\n            </p>\n            {wallet &&\n            <p>Your wallet is {walletAddress}</p> ||\n            <p>Hello! Click the button to connect</p>\n            }\n            <div className=\"multi-wrapper\">\n                <span className=\"button-wrapper\">\n                    <WalletModalProvider>\n                        <WalletMultiButton />\n                    </WalletModalProvider>\n                </span>\n                {wallet && <>\n                    <WalletDisconnectButton />\n                    <p>SOL balance: {solBalance}</p>\n                    <p>MOVE balance: {moveBalance}</p>\n                    <p>MOVE associated token address: {associatedTokenAddress && associatedTokenAddress}</p>\n                    <input type='number' placeholder='number of SOL' onChange={(event) => setSwapAmount(Number(event.target.value))} value={swapAmount}/>\n                    <Button onClick={() => swap()}>Swap</Button>\n                    <Button onClick={() => createPool()}>Create pool</Button>\n                </>}\n            </div>\n        </>\n    );\n};\n\nexport default MyWallet;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getLedgerWallet,\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletExtensionWallet,\n  getSolletWallet,\n  getTorusWallet,\n} from \"@solana/wallet-adapter-wallets\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport MyWallet from \"./MyWallet\";\n\nfunction App() {\n  // Can be set to 'devnet', 'testnet', or 'mainnet-beta'\n  const network = WalletAdapterNetwork.Devnet;\n\n  // You can also provide a custom RPC endpoint\n  const endpoint = React.useMemo(() => clusterApiUrl(network), [network]);\n\n  // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --\n  // Only the wallets you configure here will be compiled into your application\n  const wallets = React.useMemo(\n    () => [\n      getPhantomWallet(),\n      getSlopeWallet(),\n      getSolflareWallet(),\n      getLedgerWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    [network]\n  );\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets}>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <p>\n              MOVE swap\n            </p>\n\n            <p>\n              Note: Using devnet instead of testnet because devnet for Program development, testnet for new protocol testing.\n            </p>\n\n            <MyWallet />\n          </header>\n        </div>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}